Using Google Sheets Utility Functions in Colab

This repository contains utility functions for working with Google Sheets. Here's how to use them in Google Colab:

1. Repository Setup
   - Push your code to a GitHub repository
   - Make sure setup.py and all utility functions are committed
   - Note the repository URL (e.g., https://github.com/username/repo-name)

2. Colab Notebook Creation
   - Create a new notebook in Google Colab
   - Save it to your repository in the src/notebooks directory
   - Commit and push the notebook to GitHub

3. Using the Notebook in Colab
   When someone opens your notebook in Colab, they should:
   a. Clone the repository and set up Python path:
      ```python
      # Clone the repo
      !git clone https://github.com/username/repo-name.git
      %cd repo-name
      
      # Add src directory to Python path
      import sys
      !pwd  # Verify current directory
      sys.path.append('/content/repo-name/src')
      
      # Install dependencies
      !pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client pydantic
      ```
   
   b. Now they can import and use the utility functions:
      ```python
      from sheets import GoogleSheetsClient, SheetRange, SheetReadRequest, SheetWriteRequest
      ```

4. Authentication
   - Users will need to authenticate with Google:
     ```python
     from google.colab import auth
     auth.authenticate_user()
     credentials = auth.get_credentials()
     ```
   - Initialize the client:
     ```python
     client = GoogleSheetsClient(credentials)
     ```

5. Development Workflow
   When making changes to utility functions:
   a. Make changes locally
   b. Test changes
   c. Commit and push to GitHub
   d. In Colab, pull the latest changes:
      ```python
      %cd /content/repo-name
      !git pull origin master
      
      # Reload modules if needed
      import importlib
      import sheets
      importlib.reload(sheets)
      ```

Best Practices:
- Keep utility functions modular and well-typed
- Use clear documentation in notebooks
- Follow the repository's coding standards
- Test changes locally before pushing
- Use version control for both notebooks and utility functions

Important Notes:
1. The sys.path.append approach is used because Colab only opens individual notebook files, not the entire repository structure
2. Dependencies are installed explicitly rather than using setup.py to avoid potential issues with pip install -e in Colab
3. When making changes, always pull latest changes first to avoid conflicts
4. Use importlib.reload when updating modules during development

This workflow enables:
- Clean separation of utility code and notebooks
- Version control for all components
- Easy collaboration through GitHub
- Proper Python path management in Colab
- Reliable dependency management
